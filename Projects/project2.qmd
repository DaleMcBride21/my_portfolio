---
title: "Client Report - Project 2"
subtitle: "Course DS 250"
author: "Dale McBride"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
```


## Elevator pitch

_After looking through the flight data there are some issues that are apparent with flight delays. We can see that there are disparities in performance between the different airports. These insights shed light on airports grappling with higher rates of delays, allowing us to pinpoint areas for improvement._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
df = pd.read_json("https://raw.githubusercontent.com/byuidatascience/data4missing/master/data-raw/flights_missing/flights_missing.json")
```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.__

_By replacing all of the missing or abnormal values it preps the dataset to be ready to be manipulated for the next tasks._

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here

#this just shows me the top of the dataframe to start out with
df.head(20)

#this shows me how many items in what columns need to be replaced
missing_values = [-999, "", 'n/a', np.NaN]
missing = df.isin(missing_values).sum()


#this replaces all of the missing values that are in the list above as "NaN"
missing = df.isin(missing_values)
fill_nan_df = df.mask(missing, "NaN")
```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q1 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
mydat = fill_nan_df.head(1)

json_data = mydat.to_json()
json_data

```


## QUESTION|TASK 2

__Which airport has the worst delays? Discuss the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.__

_The airport with the worst delays is clearly San Francisco California airport. 26% of flights at that airport are delayed. Which is 3% above any other airport that is listed. _

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here
replace_nan_df = fill_nan_df
```

```{python}

#select the four columns that are needed
replace_nan_df = replace_nan_df.groupby('airport_code').agg({'num_of_flights_total': 'sum', 'num_of_delays_total': 'sum', 'minutes_delayed_total': 'sum'})

#code for new columns
#total flights delayed divided by total flights
proportion_of_flights = ((replace_nan_df.num_of_delays_total / replace_nan_df.num_of_flights_total))

#minutes delayed total divided by total of flights
#delay time in minutes to hours
average_delay_time_hours = (((replace_nan_df.minutes_delayed_total / replace_nan_df.num_of_flights_total) / 60))

#appends new columns
replace_nan_df['proportion_of_flights'] = proportion_of_flights
replace_nan_df['average_delay_time'] = average_delay_time_hours
replace_nan_df

```

_include figures in chunks and discuss your findings in the figure._


## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length? Discuss the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)__

_The best month to fly in to avoid delays is November. All of the other months are higher in total minutes delayed. I used the total minutes because it shows which month has the most time spent just sitting there and not getting to where you want to go._

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here

#this querys the data and only shows values that are not NaN
task_3_df = fill_nan_df
task_3_df = task_3_df.query("month != 'NaN'")

#this groups by the month and aggregates the minutes delayed total for each month
task_3_df = task_3_df.groupby('month').agg({'minutes_delayed_total': 'sum'})

#this moves the month from being the index to being a normal column
task_3_df.reset_index(inplace=True)


#this replaces the incorrect string spelling for FEBUARY as FEBRUARY
task_3_df['month'].replace('Febuary', 'February', inplace=True)
task_3_df

#this is supposed to order the months in the correct order

# month_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# task_3_df['month'] = task_3_df['month'].astype('category')

# task_3_df['month'] = task_3_df['month'].cat.set_categories(month_order, ordered=True)

# task_3_df['month'] = pd.Categorical(task_3_df['month'], categories=month_order, ordered=True)

# task_3_df = task_3_df.sort_values(by='month')
# task_3_df
```

```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
average_delay = task_3_df['minutes_delayed_total'].mean()

chart = px.bar(task_3_df,
    x='month', 
    y="minutes_delayed_total",
    title='Total minutes delayed in each month'
)

chart.add_hline(y=average_delay, line_dash='solid', line_color='red')

chart.show()
```


## QUESTION|TASK 4

__According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:__

_100% of delayed flights in the Weather category are due to weather_

_30% of all delayed flights in the Late-Arriving category are due to weather._

_From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%._

_After looking at the data it shows that the totals weather delays in quite substantial for each airport that is listed at the top of the data. Some have almost 4000 delays._

```{python}
#| label: Q4
#| code-summary: Read and format data
# Include and execute your code here

weather = (df.assign(
    severe = df.num_of_delays_weather, # no missing
    nodla_nona = lambda x: (x.num_of_delays_late_aircraft
        .replace(-999, np.nan)), #missing is -999
    mild_late = lambda x: x.nodla_nona.fillna(x.nodla_nona.mean())*0.3,
    mild = np.where(
        df.month.isin(['April', 'May', 'June', 'July', 'August']), 
            df.num_of_delays_nas*0.4,
            df.num_of_delays_nas*0.65),
    weather = lambda x: x.severe + x.mild_late + x.mild,
    proportion_weather_delay = lambda x: x.weather / x.num_of_delays_total,
    proportion_weather_total = lambda x:  x.weather / x.num_of_flights_total,
    weather_delays_total = lambda x: round(x.mild + x.severe))
    .filter(['airport_code','month','year', 'severe','mild', 'mild_late',
    'weather', 'proportion_weather_total', 
    'proportion_weather_delay', 'num_of_flights_total', 'num_of_delays_total', 'weather_delays_total']))

weather.head()
```

_include figures in chunks and discuss your findings in the figure._


## QUESTION|TASK 5

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.__

_From this graph you can see which airports have thet least amount of delays by weather and you can quickly see the two airports that have a lot of delays._


```{python}
#| label: Q5 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here

average_delay_by_airport = weather.groupby('airport_code')['proportion_weather_delay'].mean().reset_index()

chart = px.bar(average_delay_by_airport.head(6),
    x="airport_code", 
    y="proportion_weather_delay",
    title="Weather Delay Proportion"
)

chart.update_xaxes(title="Airport Code")
chart.update_yaxes(title="Weather Delay Percentage")

chart.show()
```