---
title: "Client Report - Project 3"
subtitle: "Course DS 250"
author: "Dale McBride"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```


## Elevator pitch

_Research on BYU-Idaho alumni in MLB highlights a connection between atypical batting averages and shorter professional careers. It also reveals that teams investing more in player salaries, like the Boston Red Sox over the Baltimore Orioles, tend to experience better win rates. This suggests not only the financial dynamics of team performance but also the impact of individual player statistics on career longevity. These findings offer valuable insights into the strategic aspects of baseball, from player development to team management._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
import sys
sqlite_file = "C:\\Users\\Dale McBride\\Documents\\GitHub\\school_work\\ds250\\lahmansbaseballdb.sqlite"
conn = sqlite3.connect(sqlite_file)

```

## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__

_The table about people who attended BYU-Idaho and played baseball shows that the highest salary that was paid was about $4,000,000 in 2014. While the lowest was at about $150,000 in 1997. Almost half of the players that attended BYU-Idaho made over 1 Million anually._

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here
q = '''
SELECT DISTINCT cp.playerID, s.salary, s.yearID, s.teamID, cp.schoolID -- this selects the columns
FROM collegeplaying AS cp 
LEFT JOIN salaries AS s 
ON s.playerID = cp.PlayerID
WHERE cp.schoolID = 'idbyuid'
ORDER BY s.salary DESC;
'''

df1 = pd.read_sql_query(q,conn)
df1
```


## QUESTION|TASK 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__

_After looking at the tables we can see that over the course of a career an average of about .360 is a very good batting average. If the number is higher than that the player didn't have a very long career or the just didn't hit a lot. Such as a pitcher._


_Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report._


```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here
q = '''
SELECT playerID, yearID, CAST(SUM(H) AS FLOAT) / CAST(SUM(AB) AS FLOAT) AS batting_average
FROM Batting
GROUP BY playerID, yearID
HAVING SUM(AB) >= 1
ORDER BY batting_average DESC, playerID ASC
LIMIT 5;

'''
df2 = pd.read_sql_query(q,conn)
df2


```

_Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results._

```{python}
#| label: Q2 chart
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here
q = '''
SELECT playerID, yearID, CAST(SUM(H) AS FLOAT) / CAST(SUM(AB) AS FLOAT) AS batting_average
FROM Batting
GROUP BY playerID, yearID
HAVING SUM(AB) >= 10
ORDER BY batting_average DESC, playerID ASC
LIMIT 5;
'''
df2 = pd.read_sql_query(q,conn)
df2

```

_Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results._

```{python}
#| label: Q2 table
#| code-summary: table example
#| tbl-cap-location: top
# Include and execute your code here
q = '''
SELECT playerID, CAST(SUM(H) AS FLOAT) / CAST(SUM(AB) AS FLOAT) AS career_batting_average
FROM Batting
GROUP BY playerID
HAVING SUM(AB) >= 100
ORDER BY career_batting_average DESC
LIMIT 5;

'''

df2 = pd.read_sql_query(q,conn)
df2
```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_Looking at the Baltimore Orioles and the Boston Red Sox after comparing the average salary of the two teams Boston pays a lot more than Baltimore. I wanted to see if a team pays more they will get more wins. From the two charts Boston started to catch up in pay and then paying more than Baltimore. Boston then started winning more and stayed above Baltimore in wins for a long time. In 2011 the salary peaked and declined afterwards. Interestingly the wins droped signifcantly as well after the pay went down._

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here
q = '''
SELECT yearID AS Year, teamID AS Team, AVG(salary) AS AVG_Salary
FROM salaries
WHERE teamID = 'BAL' OR teamID = 'BOS'
GROUP BY yearID, teamID
ORDER BY yearID
'''

df3 = pd.read_sql_query(q,conn)
df3

```

```{python}
q = '''
SELECT yearID AS Year, teamID AS Team, SUM(W) AS Wins
FROM pitching
WHERE teamID = 'BAL' OR teamID ='BOS'
GROUP BY yearID, teamID
HAVING yearID >= 1985 AND yearID <= 2016
ORDER BY yearID
'''

df4 = pd.read_sql_query(q,conn)
df4
```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here
chart = px.line(df3.head(70),
    x="Year", 
    y="AVG_Salary",
    color='Team',
    title='Average Salary throughout the Years'
)

chart.add_annotation(x=2011, y=5991203, text="Salary Spike in 2011", font=dict(size=10), arrowcolor="black")

chart.show()
```

```{python}
#| label: Q3 chart2
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here
chart = px.line(df4.head(200),
    x="Year", 
    y="Wins",
    color='Team',
    title='Wins Each Year'
)

chart.add_annotation(x=2011, y=90, text="2011", font=dict(size=10), arrowcolor="black")

chart.show()


```